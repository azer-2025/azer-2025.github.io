[{"id":"b30be1be519f5bf3e895d94c6885064f","title":"vue_vite2项目的构建","content":"1.安装nodejs（建议装16，18版本稳定）下载 | Node.js 中文网\n装完之后会有一个命令叫 npm\n可以在终端输入npm -v 来检查是否安装成功\n\n2.构建vite项目官方文档开始 {#getting-started} | Vite中文网\nvite 的优势\n冷服务 默认的构建目标浏览器是能在 script 标签上支持原生 ESM和原生 ESM 动态导入\nHMR 速度快到惊人的模块热更新（HMR）\nRollup打包 它使用Rollup打包你的代码，并且它是预配置的 并且支持大部分rollup插件\n使用vite初始化一个项目\nnpm\n1npm init vite@latest\n\nYarn\n1yarn create vite\n\n运行之后\n项目名称\n构建的项目模板\n\n以前是要自己执行cd 目录文件 npm i命令的，现在是一键安装好，可以直接运行 \n\n点击localhost:5173打开页面\n\n项目就成功跑起来了\npackage json 命令解析\n1&#123;  &quot;scripts&quot;: &#123;    &quot;dev&quot;: &quot;vite&quot;, // 启动开发服务器，别名：`vite dev`，`vite serve`    &quot;build&quot;: &quot;vite build&quot;, // 为生产环境构建产物    &quot;preview&quot;: &quot;vite preview&quot; // 本地预览生产构建产物  &#125;&#125;\n\n3.nodejs 底层原理（非重要）Node.js 主要由 V8、Libuv 和第三方库组成：\n\nLibuv：跨平台的异步 IO 库，但它提供的功能不仅仅是 IO，还包括进程、线程、信号、定时器、进程间通信，线程池等。\n第三方库：异步 DNS 解析（ cares ）、HTTP 解析器（旧版使用 http_parser，新版使用 llhttp）、HTTP2 解析器（ nghttp2 ）、 解压压缩库( zlib )、加密解密库( openssl )等等。\nV8：实现 JS 解析、执行和支持自定义拓展，得益于 V8 支持自定义拓展，才有了 Node.js。\n\n你也可以理解成 js应用层 桥C&#x2F;C++ 底层C&#x2F;C++\n\n","slug":"vite2-project","date":"2025-10-25T03:45:27.000Z","categories_index":"前端","tags_index":"插件,vue","author_index":"Azer"},{"id":"afe5f1e72fd075ae6892a39b4e84b157","title":"nvm的使用","content":"1.介绍在实际的前端开发过程中，可能会经常遇见 node.js 的版本问题，不同的项目需要使用不同的 node.js 版本。比如Vue2和Vue3需要的Node版本不一样。\n本文详细指导如何在Windows上安装、配置NVM（Node Version Manager），包括不同项目需求下选择Node版本，安装步骤、配置文件设置，以及如何安装、切换和验证Node及npm版本。适合前端开发者处理版本兼容问题。 \n地址：https://github.com/coreybutler/nvm-windows/releases\n\n\n\n\n\n\n\n注意\n注意：安装之前必须完全卸载已安装的node\n\n第一步：选择版本，对应下载\n第二步：这里是设置nvm的安装路径\n第三步：这里是设置使用nvm安装node时，node的安装路径\n第四步：安装完成后，在CMD命令窗口输入nvm -v,输出如下版本号即证明安装成功\n第五步：修改nvm配置文件（可选）nvm安装完成后，打开nvm安装目录下的settings.txt文件:\n123456root: D:\\nvmpath: D:\\nvm\\nodejs arch: 64 proxy: nonenode_mirror: http://npm.taobao.org/mirrors/node/npm_mirror: https://npm.taobao.org/mirrors/npm/\n\nroot和path分别是nvm和node的安装路径，这两个不要动，这是之前安装时根据你选择的路径自动生成的，这个配置文件默认也只有这两项。因为我没改配置文件，所以后面的4项我都没有，只是后来搜到了，就说一下，arch表示安装的node是多少位，proxy是设置代理，node_mirror是更改nvm下载node时的镜像，这里是设置为淘宝镜像，npm_mirror是更改npm下载依赖包的镜像，也是修改为了淘宝镜像。\n第六步：安装node查看nvm支持安装的node版本\n使用 nvm list available\n\n 使用nvm install 版本号安装指定版本node\n 比如：nvm install 22.20.0\n检测node和npm是否安装成功,如下显示则为成功：\n\n第七步：切换node版本\n\n\n\n\n\n\n注意\n必须用管理员权限打开命令行\n\n初次使用nvm安装node之后，必须先使用nvm use 版本号切换到已安装版本的node才可以\n123nvm use 16.20.0nvm list node -v\n\n\n","slug":"nvm-use","date":"2025-10-24T11:33:21.000Z","categories_index":"插件","tags_index":"node,插件","author_index":"Azer"},{"id":"8c860e702e41ad422a6fe923d8248717","title":"搭建hexo-theme-aurora主题框架","content":"\n\n\n\n\n\n\n\n\n通过自己搭建 hexo-theme-aurora主题框架，下面是官方文档的部分说明\n1.官方文档说明​\t依赖环境 ​\n\nHexo 6.3+\nYarn or NPM installed\n\n步骤 1 - 安装主题包 ​在控制台中，进入 Hexo 项目的根目录，然后运行以下命令安装主题\nYARN \n1yarn add hexo-theme-aurora hexo-plugin-aurora\n\nNPM \n1npm install hexo-theme-aurora hexo-plugin-aurora --save\n\n\n\n步骤 2 - 生成主题配置 ​因为主题是使用 NPM 或者 Yarn 安装的，而不是 clone 到 themes 文件夹的。所以我们需要自己创建一个配置文件。你只需要在 Hexo 博客的根目录下创建一个 _config.aurora.yml 配置文件来配置主题。要获取默认主题模板。\n对于 Windows 用户，可以将下面的模板复制到 _config.aurora.yml 中。\n也可以直接复制这个模版到项目根目录的 _config.aurora.yml 中\n步骤 3 - 配置 theme​因为要告诉 hexo 你要用的主题是 aurora 所以需要把 _config.yml 中的 theme 值改为 aurora\n\n打开在 Hexo 根目录下的 _config.yml\n修改把 theme 的值改为 aurora\n\nyml\n1234# Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: aurora\n\n1234# Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: aurora\n\n步骤 4 - 设置 permalink​因为使用了 Vue-router，Hexo 默认生成的页面和文章的 permalink 与我们 Vue router 中的 path 是不相符的，那么就会出现无法访问的问题。\n所以我们需要修改 Hexo 默认配置文件里面的 permalink 参数。\n\n打开在 Hexo 根目录下的 _config.yml\n修改 permalink 参数为 /post/:title.html\n\nyaml\n12345678# URL## Set your site url here. For example, if you use GitHub Page, set url as &#x27;https://username.github.io/project&#x27;url: https://tridiamond.techpermalink: /post/:title.htmlpermalink_defaults:pretty_urls:  trailing_index: true # Set to false to remove trailing &#x27;index.html&#x27; from permalinks  trailing_html: true # Set to false to remove trailing &#x27;.html&#x27; from permalinks\n\n\n步骤 5 - 设置代码高亮 ​\n\n\n\n\n\n\n\n\n主题 2.5 版本开始主题已经改为使用 Shiki 作为代码高亮引擎。Shiki支持使用从 VSCode 导出的主题。颜色标记化与 VSCode 相同! Shiki 默认还支持了一些最多人使用的主题哦！\n首先，我们需要禁用 _config.yml 中的 highlight 和 prismjs 。\nyaml\n1234highlight:  enable: falseprismjs:  enable: false\n\n\n然后将以下配置添加到主题配置文件 _config.aurora.yml 中\nyaml\n123456#! ---------------------------------------------------------------#! Highlighter Shiki#! ---------------------------------------------------------------shiki:  enable: true  backgroundColor: &#x27;#1a1a1a&#x27;\n\nhexo的命令\n12345hexo  clean             # 清除缓存文件和生成的静态文件hexo  new &quot;文章名称&quot;     # 新建界面hexo  generate          # 生成静态文件 可以简写成hexo g hexo  server            # 启动服务器   可以简写hexo shexo  deploy            # 部署网站，构建在GitHub的服务器中，网页文件将上传到关联的个人仓库 可以简写成hexo d\n\n其实到上面得步骤官网文档已经结束了，下面是自己的配置\n2.自我配置1. Hexo 中图片上传问题在使用 Hexo 博客时，图片的管理和上传是常见问题之一。特别是当你使用 Typora 进行 Markdown 写作时，默认的图片插入方式无法被 Hexo 正确识别。下面是完整解决方案。\nTypora 设置在 Typora 中依次进入：文件 → 偏好设置 → 图像将「插入图片时」设置为：\n\n复制图片到指定路径  \n路径设置为：./source/images  \n插入图片时使用相对路径。\n\n这样，Typora 每次插入图片时都会自动保存到 Hexo 的 source/images 文件夹下。\n修改 Hexo 配置打开站点根目录下的 _config.yml，找到如下配置：\n1post_asset_folder: true\n\n2. 开发 Hexo 转换图片路径插件在使用 Typora 编辑 Hexo 文章时，插入的图片路径通常是相对路径，如：(../images/example.png)\n而这个转换我们需要在文章编译为html之前，在编译的过程中转换 –&gt; &#123;% asset_img example.jpg example %&#125;\n2.1 创建插件文件并实现逻辑要让 Hexo 自动修复 Typora 插入图片的路径，我们可以通过编写一个简单的自定义插件来实现。\n在 Hexo 根目录下创建 hexo-asset-img 文件夹（如果已经存在，可以直接使用）：\n123mkdir hexo-asset-imgcd hexo-asset-imgnpm init\n\n\n2.2 测试与调试插件插件编写完成后，需要进行本地测试以确认逻辑是否生效、路径是否正确替换。\n创建index.js文件到根目录下面，复制代码到里面去\n12345678910111213141516171819202122232425262728293031const log = require(&#x27;hexo-log&#x27;)(&#123; &#x27;debug&#x27;: false, &#x27;slient&#x27;: false &#125;);/** * md文件返回 true * @param &#123;*&#125; data  */function ignore(data) &#123;    var source = data.source;    var ext = source.substring(source.lastIndexOf(&#x27;.&#x27;)).toLowerCase();    return [&#x27;md&#x27;,].indexOf(ext) &gt; -1;&#125;function action(data) &#123;    var reverseSource = data.source.split(&quot;&quot;).reverse().join(&quot;&quot;);    var fileName = reverseSource.substring(3, reverseSource.indexOf(&quot;/&quot;)).split(&quot;&quot;).reverse().join(&quot;&quot;);    // ![example](postname/example.jpg)  --&gt;  &#123;% asset_img example.jpg example %&#125;    var regExp = RegExp(&quot;!\\\\[(.*?)\\\\]\\\\(&quot; + fileName + &#x27;/(.+?)\\\\)&#x27;, &quot;g&quot;);    // hexo g    data.content = data.content.replace(regExp, &quot;&#123;% asset_img $2 $1 %&#125;&quot;,&quot;g&quot;);    // log.info(`hexo-asset-img: filename: $&#123;fileName&#125;, title: $&#123;data.title.trim()&#125;`);        return data;&#125;hexo.extend.filter.register(&#x27;before_post_render&#x27;,(data)=&gt;&#123;    if(!ignore(data))&#123;        action(data)    &#125;&#125;, 0);\n\n2.3 本地测试插件1.Hexo根目录下 package.json 中 dependencies 添加一行&quot;hexo-asset-img&quot;:&quot;^1.0.8&quot;\n2.将 hexo-asset-img 文件夹复制到 Hexo 根目录下 node modules 文件夹下\n\n\n\n\n\n\n\n注意\n二者缺一不可，不修改 package.json，没成功加载插件\n\n2.4 使用插件1npm publish --registry https://registry.npmjs.org\n\n1npm install hexo-asset-img --save\n\n","slug":"page","date":"2025-10-24T01:44:56.000Z","categories_index":"框架","tags_index":"框架","author_index":"Azer"}]